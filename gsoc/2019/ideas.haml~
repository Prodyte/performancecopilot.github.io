!!! html
%html
  %head
    = Haml::Engine.new(File.read("assets/haml-includes/head.haml")).render

  %body
    = Haml::Engine.new(File.read("assets/haml-includes/navigation.haml")).render

    %div{:class => 'site-content'}
      %div{:class => 'how-to is-typeset'}

        %div{:class => 'row-parent'}
          %div{:class => 'row'}
            %section{:class => 'row__colspaced'}
              %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--img'}
                  %br
                  %h3 Ideas List
                  %ol
                    %li
                      Analysis Tools
                      %ul
                        %li
                          %a{:href => '#htop'} PCP version of htop
                        %li
                          %a{:href => '#collectl'} PCP version of collectl
                        %li
                          %a{:href => '#datavis'} Visualization and analysis of PCP datasets
                    %li
                      Integration Projects
                      %ul
                        %li
                          %a{:href => '#metadata'} Metadata Label Support for Instrumented Applications
                        %li
                          %a{:href => '#RESP'} RESP (Redis) support in pmproxy
                    %li
                      Web Projects
                      %ul
                        %li
                          %a{:href => '#vectorbcc'} Vector BCC PMDA Integration
                        %li
                          %a{:href => '#bccpmda'} BCC PCP Agent (PMDA) Tool Extension
                    %li
                      Installer Projects
                      %ul
                        %li
                          %a{:href => '#windowspcp'} Windows PCP Installer
                        %li
                          %a{:href => '#macosxpcp'} Mac OS X PCP Installer
                  %br

              %div{:class => 'colspan12-4 colspan8-3 colspan6-2 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--cta'}
                  %h2 Google
                  %h2 Summer of Code
                  %h2 2018
                  %br
                    (
                    %a{:href => 'https://summerofcode.withgoogle.com'} Home
                    )
                  %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'htop'}
            %h3 PCP version of htop
            %p
              The Performance Co-Pilot provides a cross-platform API for accessing
              live and historical performance data from the local or remote hosts.
              %a{:href => 'http://hisham.hm/htop/'} HTOP
              is a performance analysis utility reporting per-process metrics with
              good, customizable visualization of that data.
            %p
              This project will involve implementing a HTOP "platform" for PCP.
            %p
              %strong Expected results:
              A (C language) implementation of an HTOP backend using the PCP PMAPI,
              with accompanying tests and documentation.
              The student will extend their C programming skills, as well as learn
              about the ncurses library.  Students can also expect to gain insight
              into the meaning of the kernel data reported by these tools, and the
              sampling techniques used in building the tools.
            %p
              %strong Prerequisite knowledge:
              C programming, ncurses library knowledge a plus.
            %p
              %strong Skill level:
              Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:lberk@redhat.com'} Lukas Berk
            %p
              %strong Interested students so far:
              2
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %a{:name => 'analysis'}
          %div{:class => 'col__module--img'}
            %a{:name => 'collectl'}
            %h3 PCP version of collectl
            %p
              The Performance Co-Pilot provides a cross-platform API for accessing
              live and historical performance data from the local or remote hosts.
              An initial PCP implementation (pcp-collectl) of the
              %a{:href => 'http://collectl.sourceforge.net/'} Collectl
              utility provides some initial support for the same style of reports.
              This project will extend that initial code to complete the reporting
              coverage provided by the initial collectl utility.
              The pcp-collectl utility will be updated to use the more modern
              %a{:href => 'http://man7.org/linux/man-pages/man1/pmrep.1.html'} pmrep
              utility under the covers.
              Additionally, the test coverage and documentation will be improved.
            %p
              %strong Expected results:
              The student will extend their Python programming skills,
              and can also expect to gain insight into the meaning of the kernel
              data reported by this tool, and the sampling techniques it uses.
            %p
              %strong Prerequisite knowledge:
              Python programming.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:myllynen@redhat.com'} Marko Myllynen              
            %p
              %strong Interested students so far:
              5
            %br

        %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'datavis'}
            %h3 Visualization and analysis of PCP datasets
            %p
              The PCP
              %a{:href => 'http://man7.org/linux/man-pages/man1/pmlogger.1.html'} pmlogger
              records performance statistics from a running machine,
              which can be efficiently queried and extracted as time
              series data using PCP tools like
              %a{:href => 'http://man7.org/linux/man-pages/man1/pmrep.1.html'} pmrep
            %p
              This project will develop a
              Python application to query, extract, reformat and
              visualize PCP time series data using Python's extensive
              data-science class libraries (e.g. 
              %a{:href => 'http://www.numpy.org/'} NumPy,
              %a{:href => 'http://pandas.pydata.org/'} Pandas,
              %a{:href => 'https://matplotlib.org/'} MatPlotLib,
              %a{:href => 'https://www.scipy.org/'} SciPy
              and others).
            %p
              %strong Expected results:
              Construction of an application (and class libraries) to query PCP
              time-series data using various client tools and import this into
              existing scientific data-science libraries for visualization and
              analysis. Demonstration of meaningful statistical insights from
              real-world PCP data archives.
            %p
              %strong Prerequisite knowledge:
              Strong Python programming, knowledge of statistical
              analysis, some experience with one or more python data-science
              libraries.
            %p
              %strong Skill level:
              Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:myllynen@redhat.com'} Marko Myllynen              
            %p
              %strong Interested students so far:
              7
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'vectorbcc'}
            %h3 Vector BCC Tools
            %p
              This project will implement a series of new
              %a{:href => 'https://github.com/Netflix/vector/wiki/Getting-Started'} Vector
              widgets that expose
              %a{:href => 'https://github.com/iovisor/bcc'} BCC tools
              to users via a web interface.
            %p
              The list of BCC tool widgets to be implemented is open for discussion, but this is the current wishlist:
            %p
              Already exist in pcp/src/pmdas/bcc/modules, but there might be more work to ensure they work well:
              %ul
                %li biolatency - as input for a latency heat map
                %li biotop - as input for a live table or line chart of per-process I/O time
                %li tcplife - as input for a table of sessions details
            %p
              6 new metrics:
              %ul
                %li ext4dist/xfsdist/zfsdist - as input for a latency heat map
                %li biosnoop - as input (end time, latency, type: R or W) for a scatter plot: completion time vs latency, and coloring reads red and writes blue
                %li biosnoop - as input (end time, device, offset) for an offset heat map: showing per-device access patterns
                %li execsnoop - as input for a table of process details
                %li tcpretrans - as input for a table of retransmit details
                %li tcptop - as input for a live table or line chart of per-process TCP throughput
                %li runqlat - as input for a latency heat map
            %p
              Stretch goals:
              %ul
                %li profile - as stack trace input for live CPU flame graphs
                %li cachestat - as input for a line graph showing each statistic
            %p
              %strong Expected results:
              Minimum of 6 new widgets added to Vector.
            %p
              %strong Prerequisite knowledge:
              JavaScript and AngularJS. Previous experience in performance analysis is a plus.
            %p
              %strong Skill level:
              Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:mspier@netflix.com'} Martin Spier
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            %p
              %strong Interested students so far:
              2
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'bccpmda'}
            %h3 BCC PCP Agent (PMDA) Tool Extension
            %p
              This project will extend the capabilities of the current 
              %a{:href => 'https://github.com/myllynen/pcp-bcc-pmda'} BCC PCP Agent (PMDA)
              , by adding new
              %a{:href => 'https://github.com/iovisor/bcc'} BCC tools
              to it.
            %p
              These new tools will be used by
              %a{:href => 'https://github.com/Netflix/vector'} Vector
              in a set of new widgets that will expose these tools via a web interface.
            %p
              The list of BCC tool widgets to be implemented is open for discussion, but below is the current wishlist.
            %p
              Some already exist in pcp/src/pmdas/bcc/modules, but there might be more work to ensure they work well:
              %ul
                %li biolatency - as input for a latency heat map
                %li biotop - as input for a live table or line chart of per-process I/O time
                %li tcplife - as input for a table of sessions details
            %p
              6 new metrics:
              %ul
                %li ext4dist/xfsdist/zfsdist - as input for a latency heat map
                %li biosnoop - as input (end time, latency, type: R or W) for a scatter plot: completion time vs latency, and coloring reads red and writes blue
                %li biosnoop - as input (end time, device, offset) for an offset heat map: showing per-device access patterns
                %li execsnoop - as input for a table of process details
                %li tcpretrans - as input for a table of retransmit details
                %li tcptop - as input for a live table or line chart of per-process TCP throughput
                %li runqlat - as input for a latency heat map
            %p
              Stretch goals:
              %ul
                %li profile - as stack trace input for live CPU flame graphs
                %li cachestat - as input for a line graph showing each statistic
            %p
              %strong Expected results:
              Minimum of 6 new BCC tools added to the BCC PCP Agent (PMDA).
            %p
              %strong Prerequisite knowledge:
              C programming and Linux kernel knowledge. Previous experience with BCC/BFP and performance analysis is a plus.
            %p
              %strong Skill level:
              Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:myllynen@redhat.com'} Marko Myllynen
              ,
              %a{:href => 'mailto:mspier@netflix.com'} Martin Spier
            %p
              %strong Interested students so far:
              2
            %br

        %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'metadata'}
            %h3 Metadata Label Support for Instrumented Applications
            %p
              PCP provides an extremely lightweight mechanism for instrumenting
              applications using shared memory backed by memory mapped files - the
              %a{:href => 'http://man7.org/linux/man-pages/man5/mmv.5.html'} MMV
              (memory mapped values) API.

              Recently PCP has been extended to provide arbitrary metric metadata in
              the form of key/value pairs - as an extension to the metadata it has
              always provided, namely units, semantics, type, and so on.
            %p
              This project will explore extending the memory-map instrumentation
              model with support for labels. Firstly, an extension to the memory
              mapped format to support labels will be devised by the student and
              mentor (MMV version 3), and for reading this format will be added to
              the PMDA and diagnostic utilities.

              Secondly, the application instrumentation APIs will be extended to
              support writing this revised format, with new APIs allowing metadata
              labels to be set for individual metrics and groups of metrics within
              an application. There are several language bindings that will need to
              be updated to support this - the student can tackle some or all of
              these - in languages as varied as C, Java, Python, Go and Rust.
            %p
              %strong Expected results:
              The student will gain substantive knowledge of instrumenting
              applications for performance analysis efficiently and
              comprehensively. The Performance Co-Pilot toolkit will be explored in
              depth, and significant knowledge about system-level performance
              analysis in general will be acquired.
            %p
              %strong Prerequisite knowledge:
              Strong C language proficiency is required, as well as knowledge of one
              or more of Python, Java, Go and Rust. Experience in Linux use and
              programming would be beneficial.
            %p
              %strong Skill level:
              Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:ryan@doylenet.net'} Ryan Doyle
              ,
              %a{:href => 'mailto:dextrous93@gmail.com'} Suyash
              ,
              %a{:href => 'sauravsachidanand@gmail.com'} Saurav Sachidanand
            %p
              %strong Interested students so far:
              1
            %br
        %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'RESP'}
            %h3 RESP (Redis) support in pmproxy
            %p
              %a{:href => 'http://redis.io'} Redis 
              is an in-memory NoSQL data cache being used in PCP for
              search and serving time series performance data.
              PCP metadata and data keys are distributed across
              potentially many Redis servers, and access to individual
              keys is automated by PCP client library code, for PCP
              client tools like pmseries(1).  Direct access is
              relatively non-intuitive for human operators and
              developers - something we'd like to change.
            %p
              Redis clients communicate with the Redis server using a protocol
              called RESP
              %a{:href => 'https://redis.io/topics/protocol'}
              (REdis Serialization Protocol). It is a relatively
              simple text-based protocol which can co-exist with other
              protocols supported by the PCP pmproxy(1) daemon -
              i.e. the native and secure PCP protocols.
            %p
              This project involves extending pmproxy to support RESP, in a fashion
              similar to the twemproxy
              %a{:href => 'https://github.com/twitter/twemproxy/'}
              (aka NutCracker) project, such that an arbitrary Redis client (like the
              redis-cli
              %a{:href => 'https://redis.io/topics/rediscli]'}
              can access the distributed key store using the direct
              key-to-server mapping mechanism used by the existing PCP
              time series code.
            %p
              %strong Expected results:
              The student will gain a deep understanding of Redis, a popular
              in-memory cache, and Performance Co-Pilot, a toolkit for system-level
              performance analysis.
            %p
              %strong Prerequisite knowledge:
              Strong proficiency in C language programming is
              required. Experience using and developing software on Linux would be
              advantageous.
            %p
              %strong Skill level:
              Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:lberk@redhat.com'} Lukas Berk
            %p
              %strong Interested students so far:
              1
            %br

        %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'windowspcp'}
            %h3 Windows PCP installer
            %p
              PCP has been ported to many platforms, including Windows.
              This project involves customizing and extending the popular
              %a{:href => 'https://git-for-windows.github.io'} git
              for Windows installer with PCP packages.
              This installer is a particularly good match for PCP, as it
              has many of the same sorts of needs, such as the need to
              install several POSIX command line utilities as well.
            %p
              %strong Expected results:
              Demonstrated monitoring of Windows servers with latest PCP,
              after a clean installation experience.
            %p
              %strong Prerequisite knowledge:
              Knowledge of Windows and POSIX systems, Win32 API experience a plus.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:kenj@kenj.id.au'} Ken McDonell
            %p
              %strong Interested students so far:
              1
            %br

        %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'macosxpcp'}
            %h3 Mac OS X PCP installer
            %p
              PCP has been ported to many platforms, including Mac OS X.
              This project involves building a new PCP installer for the
              popular Mac OS X platform, based on technologies available
              in the latest versions of the operating system, switching from
              the (now deprecated) technologies previously used.
            %p
              In addition, the student will transition PCP to using
              %a{:href => 'https://en.wikipedia.org/wiki/Launchd'} launchd
              for daemon process management.
            %p
              %strong Expected results:
              Improved installation and runtime experience for PCP on Mac OS X.
            %p
              %strong Prerequisite knowledge:
              Knowledge of Mac OS X and POSIX systems
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:psmith@aconex.com'} Paul Smith
            %p
              %strong Interested students so far:
              1
            %br

    = Haml::Engine.new(File.read("assets/haml-includes/footer.haml")).render
